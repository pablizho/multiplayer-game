const baseUrl = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
let currentRoomId = null;
let ws;  // WebSocket
let currentTurn = "";  // "host" –∏–ª–∏ "guest"
let currentStage = 1;  // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket
function connectWebSocket(roomId) {
  const protocol = (window.location.protocol === "https:") ? "wss" : "ws";
  ws = new WebSocket(`${protocol}://${window.location.host}/ws/rooms/${roomId}`);

  ws.onopen = () => {
    console.log("WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ", roomId);
  };

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log("WS –ø–æ–ª—É—á–∏–ª:", data);
    if (!data.event) return;

    // 1) round_start
    if (data.event === "round_start") {
        // –°–µ—Ä–≤–µ—Ä —Å–∫–∞–∑–∞–ª: –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.
      const p = data.payload;
      currentTurn = p.turn;   // "host" –∏–ª–∏ "guest"
      currentStage = p.stage; // –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
      document.getElementById("game-result").innerHTML =
        `<p>–†–∞—É–Ω–¥ ${currentStage} –Ω–∞—á–∞–ª—Å—è. –•–æ–¥–∏—Ç: ${currentTurn === "host" ? "–•–æ—Å—Ç" : "–ì–æ—Å—Ç—å"}</p>`;

      // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ ¬´–ì–æ—Ç–æ–≤¬ª –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞—É–Ω–¥–æ–º, –¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫:
      document.getElementById("ready-btn").classList.remove("hidden");
      // ...–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞:
      document.getElementById("roll-btn").disabled = true;
    }

    // 2) dice_result
    else if (data.event === "dice_result") {
      const p = data.payload;
      document.getElementById("game-result").innerHTML += 
        `<p>${p.player} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫: ${p.dice_value}</p>
         <p>–°—á—ë—Ç: –•–æ—Å—Ç ${p.host_total} ‚Äì –ì–æ—Å—Ç—å ${p.guest_total}</p>`;

      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ finished, —Å–º–æ—Ç—Ä–∏–º, —É –∫–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:
      if (p.status !== "finished") {
        // p.playerTurn = "guest" –∏–ª–∏ "host" –∏–ª–∏ null
        if (p.playerTurn === "guest") {
          currentTurn = "guest";
        } else if (p.playerTurn === "host") {
          currentTurn = "host";
        } else {
          // null ‚Äî –∑–Ω–∞—á–∏—Ç, —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∂–¥—ë–º round_start
          currentTurn = null;
        }

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ —Ç–æ–º—É, —É –∫–æ–≥–æ —Ö–æ–¥:
        const currentUser = localStorage.getItem("username");
        if (currentTurn === "host" && currentUser === window.currentHost) {
          document.getElementById("roll-btn").disabled = false;
        } else if (currentTurn === "guest" && currentUser === window.currentGuest) {
          document.getElementById("roll-btn").disabled = false;
        } else {
          document.getElementById("roll-btn").disabled = true;
        }
      }
    }

    // 3) game_finished
    else if (data.event === "game_finished") {
      const p = data.payload;
      document.getElementById("game-result").innerHTML += `<p>${p.final_message}</p>`;
      document.getElementById("roll-btn").disabled = true;
      document.getElementById("ready-btn").disabled = true;
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å":
      showRematchOfferUI();
    }

    // 4) rematch_offer
    else if (data.event === "rematch_offer") {
      const from = data.payload.from;
      const accept = confirm(`–ò–≥—Ä–æ–∫ ${from} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–∏–≥—Ä–∞—Ç—å. –ü—Ä–∏–Ω—è—Ç—å?`);
      answerRematch(yes);
    }

    // 5) rematch_accepted
    else if (data.event === "rematch_accepted") {
      alert(data.payload.message);
      resetGameUI();
    }

    // 6) rematch_declined
    else if (data.event === "rematch_declined") {
      alert(data.payload.message);
      document.getElementById("game-room-overlay").classList.add("hidden");
    }
  };

  ws.onclose = () => {
    console.log("WebSocket –∑–∞–∫—Ä—ã—Ç");
  };
}




// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

document.addEventListener("DOMContentLoaded", () => {
    console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...");

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const openModalBtn = document.getElementById("open-register-modal");
    if (openModalBtn) {
        openModalBtn.addEventListener("click", openModal);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #open-register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
    const cancelModalBtn = document.getElementById("modal-cancel");
    if (cancelModalBtn) {
        cancelModalBtn.addEventListener("click", closeModal);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #modal-cancel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
    const registerBtn = document.getElementById("modal-register");
    if (registerBtn) {
        registerBtn.addEventListener("click", handleRegister);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #modal-register –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    const betInput = document.getElementById("bet");
    if (betInput) {
        betInput.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                this.blur();
            }
        });
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–Ω–∞—Ç
    const roomsBtn = document.getElementById("rooms-btn");
    const roomsModal = document.getElementById("rooms-modal");

    if (roomsBtn) {
      roomsBtn.addEventListener("click", () => {
        roomsModal.classList.remove("hidden");
        loadRooms(); // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
      });
    }

    const closeRoomsBtn = document.getElementById("close-rooms-btn");
    if (closeRoomsBtn) {
      closeRoomsBtn.addEventListener("click", () => {
        roomsModal.classList.add("hidden");
      });
    }

    adjustLayout();
    window.addEventListener("resize", adjustLayout);
    checkAuth();

    const currentPath = window.location.pathname;
    const token = localStorage.getItem("token");

    if (token && !window.location.pathname.includes("game.html")) {
        window.location.href = "game.html";
    } else if (!token && window.location.pathname.includes("game.html")) {
        window.location.href = "register.html";
    }

    if (currentPath.includes("register.html")) {
        console.log("–ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        return;
    }
    if (currentPath.includes("game.html")) {
        console.log("–ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...");
        restoreState();
        return;
    }
    console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
    window.location.href = "register.html";
});


function applyBet() {
    document.getElementById("bet").blur(); // –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal() {
    console.log("üîπ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
    const modal = document.getElementById("register-modal");
    if (modal) {
        modal.classList.remove("hidden");
    } else {
        console.error("‚ùå #register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    console.log("üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
    const modal = document.getElementById("register-modal");
    if (modal) {
        modal.classList.add("hidden");
    } else {
        console.error("‚ùå #register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
}

function showError(message) {
    const errorMsg = document.getElementById("error-message");
    errorMsg.textContent = message;
    errorMsg.classList.remove("hidden");
    setTimeout(() => errorMsg.classList.add("hidden"), 3000);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleRegister() {
    console.log("üü¢ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");

    const username = document.getElementById("modal-username").value.trim();
    const password = document.getElementById("modal-password").value.trim();

    if (!username || !password) {
        showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!");
        return;
    }

    console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (${username})`);

    try {
        const response = await fetch(`${baseUrl}/register`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, password })
        });

        const data = await response.json();
        console.log("üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

        if (response.ok) {
            localStorage.setItem("token", data.access_token);
            localStorage.setItem("username", username);
            console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ game.html...");
            window.location.href = "game.html";
        } else {
            alert(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const token = localStorage.getItem("token");
    const path = window.location.pathname;

    if (token) {
        if (!path.includes("game.html")) {
            console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É...");
            window.location.href = "game.html";
        }
    } else {
        if (path.includes("game.html")) {
            console.log("üö´ –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
            window.location.href = "register.html";
        }
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function restoreState() {
    const token = localStorage.getItem("token");

    if (!token) {
        console.log("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
        window.location.href = "register.html";
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    fetch(`${baseUrl}/validate-token`, {
        headers: {
            "Authorization": `Bearer ${token}`
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            localStorage.removeItem("token");
            window.location.href = "register.html";
        }
    })
    .then(data => {
        if (data) {
            localStorage.setItem("username", data.username);
            updateProfile(data.username, data);
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ game.html, –æ—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å
             // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.username}! üéâ`, "success");
            if (!window.location.pathname.includes("game.html")) {
                window.location.href = "game.html";
            }
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:", error);
        window.location.href = "register.html";
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
function adjustLayout() {
    const container = document.querySelector('.container');
    const statsPanel = document.querySelector('.stats-panel');
    const mainPanel = document.querySelector('main');
    const animationArea = document.getElementById('animation-area');

    if (container && statsPanel && mainPanel) {
        const containerHeight = window.innerHeight;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        statsPanel.style.height = `${containerHeight}px`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        const statsPanelHeight = statsPanel.offsetHeight;
        mainPanel.style.height = `${containerHeight}px`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        if (animationArea) {
        const containerWidth = animationArea.offsetWidth;
        animationArea.style.height = `${Math.max(100, containerWidth * 6 / 16)}px`; // –ü—Ä–æ–ø–æ—Ä—Ü–∏—è 6:16
    }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –Ω–∏–∂–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        adjustBottomPanel(mainPanel, containerHeight);
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∏–∂–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function adjustBottomPanel(mainPanel, containerHeight) {
    const debugConsole = document.getElementById("debug-console");
    const tabs = document.getElementById("tabs");

    if (debugConsole && tabs) {
        const debugHeight = debugConsole.offsetHeight;
        const tabsHeight = tabs.offsetHeight;

        const remainingHeight = containerHeight - (tabsHeight + debugHeight);

        if (remainingHeight > 0) {
            mainPanel.style.paddingBottom = `${remainingHeight}px`; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–Ω–∏–∑—É
        } else {
            mainPanel.style.paddingBottom = "0px"; // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        }
    }
}

function showNotification(message, type = "info", duration = 3000) {
    const container = document.getElementById("notification-container");

    const notification = document.createElement("div");
    notification.classList.add("notification", type, "show");

    notification.innerHTML = `
        <span>${message}</span>
        <button class="close-btn" onclick="this.parentElement.classList.add('hide')">&times;</button>
    `;

    container.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.add("hide");
        setTimeout(() => notification.remove(), 400); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    }, duration);
}





// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
function logDebug(message) {
    const debugLog = document.getElementById("debug-log");
    const timestamp = new Date().toLocaleTimeString();
    debugLog.textContent += `[${timestamp}] ${message}\n`;
    debugLog.scrollTop = debugLog.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ LocalStorage
function saveToLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LocalStorage
function getFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LocalStorage
function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function register() {
    const username = document.getElementById("username").value.trim();
    if (!username) {
        alert("Please enter a username!");
        return;
    }

    // –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    const password = prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
    if (!password) {
        alert("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/register`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: username, password: password })
        });

        const data = await response.json();

        if (response.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            localStorage.setItem("token", data.access_token);
            localStorage.setItem("username", username);
            window.location.href = "game.html";
        } else {
            alert(data.detail || "Registration failed.");
        }
    } catch (error) {
        alert("An error occurred during registration. Please try again.");
    }
}



function switchToMainInterface() {
    document.getElementById("registration").classList.add("hidden"); // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    document.getElementById("tabs").classList.remove("hidden"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
    logDebug("Switched to main interface.");
}

// –°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async function dailyReward() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, —á—Ç–æ –º—ã ¬´–∑–∞–ø—Ä–æ—Å–∏–ª–∏ Daily¬ª
    showAnimation("daily");

    try {
        const response = await fetch(`${baseUrl}/daily/${username}`, {
          headers: {
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    });
        const data = await response.json();
        if (data.total_coins) {
            document.getElementById("stat-coins").innerText = data.total_coins;
        }
        showModal(data.message, "success");
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: ${error}`, "error");
    } finally {
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º hideAllAnimations() –∑–¥–µ—Å—å!
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–∏–º —Ç–∞–π–º–µ—Ä—ã ‚Äî –æ–Ω–∏ —Å–∞–º–∏ —Ä–µ—à–∞—Ç,
        // –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å daily-–∞–Ω–∏–º–∞—Ü–∏—é
        fetchTimers();
    }
}


// –†–∞–±–æ—Ç–∞
async function workReward() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ¬´–†–∞–±–æ—Ç–∞–µ–º¬ª
    showAnimation("work");

    try {
        const response = await fetch(`${baseUrl}/work/${username}`, {
          headers: {
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    });
        const data = await response.json();
        if (data.total_coins) {
            document.getElementById("stat-coins").innerText = data.total_coins;
        }
        showModal(data.message, "success");
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ: ${error}`, "error");
    } finally {
        // –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é,
        // –∞ –¥–∞—ë–º fetchTimers() –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å ¬´work-animation¬ª
        fetchTimers();
    }
}


let diceAnimationInterval = null; // –•—Ä–∞–Ω–∏–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

// –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
async function playDice() {
    const username = document.getElementById("profile-username").innerText;
    const betInput = document.getElementById("bet").value;
    const bet = betInput ? parseInt(betInput, 10) : 0;

    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }
    if (bet <= 0) {
        showModal("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", "error");
        return;
    }

    const canvas = document.getElementById('diceCanvas');
    const ctx = canvas.getContext('2d');
const diceWidth = canvas.width / 2;  // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã canvas
    const diceHeight = canvas.height;    // –ü–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ canvas

   function drawDice(x, y, width, height, value) {
    const img = new Image();
    img.src = `/static/images/dice/dice-${value}.png`;
    img.onload = () => {
        ctx.drawImage(img, x, y, width, height);
    };
}

    showElementById("dice-animation");

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    let interval = setInterval(() => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const random1 = Math.floor(Math.random() * 6) + 1;
        const random2 = Math.floor(Math.random() * 6) + 1;
        const diceWidth = canvas.width / 2; // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã canvas
    const diceHeight = canvas.height;  // –ü–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ canvas

    drawDice(0, 0, diceWidth, diceHeight, random1);  // –õ–µ–≤—ã–π –∫—É–±–∏–∫
    drawDice(diceWidth, 0, diceWidth, diceHeight, random2); // –ü—Ä–∞–≤—ã–π –∫—É–±–∏–∫
    }, 100);

    try {
        // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        const response = await fetch(`${baseUrl}/games/dice/${username}?bet=${bet}`, {
            headers: { "Authorization": "Bearer " + localStorage.getItem("token") }
        });

        if (!response.ok) {
            const errorData = await response.json();
            showModal(errorData.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞", () => {
                hideElementById("dice-animation"); // –ö—É–±–∏–∫–∏ –ø—Ä–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            });
            clearInterval(interval);
            return;
        }

        const data = await response.json();
        const [dice1, dice2] = data.dice;

        // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setTimeout(() => {
            clearInterval(interval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawDice(0, 0, canvas.width / 2, canvas.height, dice1);  // –õ–µ–≤—ã–π –∫—É–±–∏–∫
    drawDice(canvas.width / 2, 0, canvas.width / 2, canvas.height, dice2); // –ü—Ä–∞–≤—ã–π –∫—É–±–∏–∫

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
             // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–ø–µ—Ä—å –∂–¥–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–ø—Ä—è—Ç–∞—Ç—å –∫—É–±–∏–∫–∏
            showModal(data.message, () => {
                hideElementById("dice-animation"); // –ö—É–±–∏–∫–∏ –ø—Ä–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–û–ö" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"
            });

            

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById("stat-coins").textContent = data.total_coins;
            document.getElementById("stat-free-rolls").textContent = data.free_rolls;

             }, 1500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞: ${error.message}`, () => {
            hideElementById("dice-animation"); // –ö—É–±–∏–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        });
        clearInterval(interval);
    }
}



//–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—Ä–æ—Å–∫–æ–≤.
// –ü–æ–∫—É–ø–∫–∞ –±—Ä–æ—Å–∫–æ–≤
async function buyRolls() {
    showModal("–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (1 –±—Ä–æ—Å–æ–∫ = 10 –º–æ–Ω–µ—Ç)", async (rollsToBuy) => {
        if (!rollsToBuy || rollsToBuy <= 0) {
            showModal("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤.", () => {});
            return;
        }

        const username = document.getElementById("profile-username").innerText;
        if (!username || username === "Guest") {
            showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
            return;
        }

        try {
            const response = await fetch(`${baseUrl}/buy-rolls/${username}`, {
                method: "POST",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem("token"),
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rolls: rollsToBuy })
            });
            const data = await response.json();

            if (response.ok) {
                document.getElementById("stat-coins").innerText = data.total_coins;
                document.getElementById("stat-free-rolls").innerText = data.free_rolls;
                showModal(data.message, () => {});
            } else {
                showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤.", () => {});
            }
        } catch (error) {
            showModal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤: " + error, () => {});
        }
    }, true);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
async function buyAdditionalRolls(username) {
    const rollsToBuy = parseInt(prompt("–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (1 –±—Ä–æ—Å–æ–∫ = 10 –º–æ–Ω–µ—Ç)"), 10);
    if (isNaN(rollsToBuy) || rollsToBuy <= 0) {
        alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤.");
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/buy-rolls/${username}`, {
            method: "POST",
            headers: {
                "Authorization": "Bearer " + localStorage.getItem("token"),
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ rolls: rollsToBuy })
        });
        const data = await response.json();

        if (response.ok) {
            alert(data.message);
            document.getElementById("stat-coins").innerText = data.total_coins;
            document.getElementById("stat-free-rolls").innerText = data.free_rolls;
        } else {
            alert(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤.");
        }
    } catch (error) {
        logDebug(`Error buying rolls: ${error}`);
        alert("An error occurred while buying rolls.");
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function switchToMainInterface() {
    document.getElementById("registration").classList.add("hidden");
    document.getElementById("tabs").classList.remove("hidden");
    logDebug("Switched to main interface.");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfile(username, data) {
    document.getElementById("profile-username").innerText = username;
    document.getElementById("stat-coins").innerText = data.coins || 0;
    document.getElementById("stat-rank").innerText = data.rank || "---";
    document.getElementById("stat-free-rolls").innerText = data.free_rolls || 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    const avatarElement = document.getElementById("avatar");
    avatarElement.src = `/static/avatars/${data.avatar}?v=` + new Date().getTime();

    logMessage(
      `–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: –ò–º—è = ${username}, –ú–æ–Ω–µ—Ç—ã = ${data.coins}, ` +
      `–†–∞–Ω–≥ = ${data.rank}, Free Rolls = ${data.free_rolls}`,
      "info"
    );



    // <-- –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤, —Ç.–∫. username —É–∂–µ —Ç–æ—á–Ω–æ –Ω–µ "Guest"
    fetchTimers();
}




//  —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:
async function deleteProfile() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
        return;
    }

    showModal("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", async (confirmed) => {
        if (!confirmed) return;

        try {
            const response = await fetch(`${baseUrl}/delete-profile/${username}`, {
                method: "DELETE"
            });
            const data = await response.json();

            if (response.ok) {
                showModal("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", () => {
                    removeFromLocalStorage("username");
                    window.location.href = "register.html";
                });
            } else {
                showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", () => {});
            }
        } catch (error) {
            showModal("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", () => {});
        }
    });
}




// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabId) {
    saveLogs(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏

    const tabs = document.querySelectorAll(".tab-content");
    tabs.forEach(tab => tab.classList.remove("active"));
    document.getElementById(tabId).classList.add("active");

    const buttons = document.querySelectorAll(".tab-button");
    buttons.forEach(btn => btn.classList.remove("active"));
    event.target.classList.add("active");

    restoreLogs(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏
    logMessage(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`, "info");

    // <-- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É –≤–æ "–≤–Ω–µ—à–Ω–µ–π" –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    window.currentTab = tabId;

    // –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å fetchTimers(), —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∏–º–∞—Ü–∏–π
    fetchTimers();
}


let logHistory = [];

function saveLogs() {
    const debugLog = document.getElementById("debug-log");
    logHistory = [...debugLog.children].map(child => child.outerHTML);
}

function restoreLogs() {
    const debugLog = document.getElementById("debug-log");
    debugLog.innerHTML = ""; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    logHistory.forEach(log => debugLog.innerHTML += log);
}


// —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é:
function toggleSettingsMenu() {
    const settingsMenu = document.getElementById("settings-menu");
    if (!settingsMenu) return;

    settingsMenu.classList.toggle("hidden");
    settingsMenu.style.display = settingsMenu.classList.contains("hidden") ? "none" : "block";
}

function toggleAvatarSelector() {
    const avatarMenu = document.getElementById("avatar-selector");
    if (avatarMenu) {
        if (avatarMenu.classList.contains("hidden")) {
            avatarMenu.style.display = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å
            avatarMenu.classList.remove("hidden");
        } else {
            avatarMenu.style.display = "none"; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
            avatarMenu.classList.add("hidden");
        }
        console.log("Current display style:", getComputedStyle(avatarMenu).display);
    }
}



// –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
async function selectAvatar(avatarName) {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/set-avatar/${username}`, {
            method: "POST",
            headers: {
                "Authorization": "Bearer " + localStorage.getItem("token"),
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ avatar: avatarName })
        });

        const data = await response.json();

        if (response.ok) {
            const avatarElement = document.getElementById("avatar");

            // –û–±—Ö–æ–¥ –∫–µ—à–∞ —Å `?v=` + timestamp
            avatarElement.src = `/static/avatars/${avatarName}?v=${new Date().getTime()}`;

            showModal("–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", () => {});
        } else {
            showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏.", () => {});
        }
    } catch (error) {
        showModal("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏.", () => {});
    }
}





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å–æ–ª—å
function logMessage(message, type = 'info') {
    const debugLog = document.getElementById("debug-log");
    const timestamp = new Date().toLocaleTimeString();
    const formattedMessage = `[${timestamp}] ${message}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
    const lastMessage = debugLog.lastElementChild;
    if (lastMessage && lastMessage.textContent.includes(message)) {
        return;
    }

    const messageElement = document.createElement("div");
    messageElement.classList.add("log-message", type);
    messageElement.innerHTML = `<span class="timestamp">${formattedMessage}</span>`;
    debugLog.appendChild(messageElement);
    debugLog.scrollTop = debugLog.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", fetchTimers);

async function fetchTimers() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") return;

    try {
        const response = await fetch(`${baseUrl}/timers/${username}`);
        if (!response.ok) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã");
        }
        const data = await response.json();

        // –û–ø—Ä–µ–¥–µ–ª–∏–º, –Ω–∞ –∫–∞–∫–æ–π –≤–∫–ª–∞–¥–∫–µ –º—ã —Å–µ–π—á–∞—Å
        const currentTab = window.currentTab || "daily";

        // DAILY-–∞–Ω–∏–º–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "daily" –∏ daily>0
        if (currentTab === "daily" && data.daily > 0) {
            showElementById("daily-animation");
        } else {
            hideElementById("daily-animation");
        }

        // WORK-–∞–Ω–∏–º–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "work" –∏ work>0
        if (currentTab === "work" && data.work > 0) {
            showElementById("work-animation");
        } else {
            hideElementById("work-animation");
        }

        // Dice-–∞–Ω–∏–º–∞—Ü–∏—é –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∑–¥–µ—Å—å, –æ–Ω–∞ –Ω–µ –∑–∞–≤—è–∑–∞–Ω–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä.

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—Å—á—ë—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        startTimer(data.daily, document.getElementById("daily-timer"));
        startTimer(data.work, document.getElementById("work-timer"));
        startTimer(data.free_rolls, document.getElementById("free-rolls-timer"));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤:", error);
    }
}




function startTimer(duration, display) {
    if (duration <= 0) {
        display.textContent = "–ì–æ—Ç–æ–≤–æ!";
        return;
    }

    let timer = duration;
    clearInterval(display.timerInterval);

    display.timerInterval = setInterval(() => {
        display.textContent = formatTimeRemaining(timer);

        if (--timer < 0) {
            clearInterval(display.timerInterval);
            display.textContent = "–ì–æ—Ç–æ–≤–æ!";
        }
    }, 1000);
}


function toggleMenu() {
    const panel = document.getElementById("stats-panel");
    
    if (panel.style.display === "none") {
        panel.style.display = "block";
        setTimeout(() => panel.classList.add("active"), 10);
    } else {
        panel.classList.remove("active");
        setTimeout(() => panel.style.display = "none", 300);
    }
}

function showModal(message, callback, inputRequired = false) {
    const modal = document.getElementById("custom-modal");
    const messageElement = document.getElementById("modal-message");
    const inputField = document.getElementById("modal-input");
    const confirmButton = document.getElementById("modal-confirm");
    const cancelButton = document.getElementById("modal-cancel");

    messageElement.textContent = message;
    modal.classList.remove("hidden");

    if (inputRequired) {
        inputField.classList.remove("hidden");
        inputField.value = "";
        inputField.focus();
    } else {
        inputField.classList.add("hidden");
    }

    confirmButton.onclick = () => {
        const inputValue = inputRequired ? parseInt(inputField.value, 10) : true;
        modal.classList.add("hidden");
        callback(inputValue);
    };

    cancelButton.onclick = () => {
        modal.classList.add("hidden");
        callback(false);
    };
}



function formatTimeRemaining(seconds) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ –∏–ª–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ì–æ—Ç–æ–≤–æ!¬ª
    if (seconds <= 0) {
        return "–ì–æ—Ç–æ–≤–æ!";
    }

    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hrs > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        // –ü—Ä–∏–º–µ—Ä: "2—á 15–º"
        return `${hrs}—á ${mins}–º`;
    } else if (mins > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        // –ü—Ä–∏–º–µ—Ä: "45–º 30—Å"
        return `${mins}–º ${secs}—Å`;
    } else {
        // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥—ã
        // –ü—Ä–∏–º–µ—Ä: "30—Å"
        return `${secs}—Å`;
    }
}

function showElementById(id) {
    document.getElementById(id).classList.remove("hidden");
}

function hideElementById(id) {
    document.getElementById(id).classList.add("hidden");
}


function showAnimation(type) {
    // –°–ø—Ä—è—á–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    document.getElementById("daily-animation").classList.add("hidden");
    document.getElementById("work-animation").classList.add("hidden");
    document.getElementById("dice-animation").classList.add("hidden");

    // –ü–æ–∫–∞–∂–µ–º –Ω—É–∂–Ω—É—é
    if (type === "daily") {
        document.getElementById("daily-animation").classList.remove("hidden");
    } else if (type === "work") {
        document.getElementById("work-animation").classList.remove("hidden");
    } else if (type === "dice") {
        document.getElementById("dice-animation").classList.remove("hidden");
    }
}

function hideAllAnimations() {
    document.getElementById("daily-animation").classList.add("hidden");
    document.getElementById("work-animation").classList.add("hidden");
    document.getElementById("dice-animation").classList.add("hidden");
}


//–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:-----------------------------------------------------------------------------------------------------------------
async function loadRooms() {
  const baseUrl = window.location.origin;
  try {
    const response = await fetch(`${baseUrl}/rooms`);
    if (!response.ok) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã");
    }
    const data = await response.json();
    const container = document.getElementById("rooms-list-scroll");
    container.innerHTML = ""; // –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

    const currentUser = localStorage.getItem("username");

    data.rooms.forEach(room => {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
      const roomDiv = document.createElement("div");
      roomDiv.classList.add("room-item");
      roomDiv.style.borderBottom = "1px solid #ccc";
      roomDiv.style.padding = "10px";
      roomDiv.style.cursor = "pointer";
      roomDiv.style.position = "relative"; // —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–≥–ª–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
      roomDiv.innerHTML = `
        <strong>–ö–æ–º–Ω–∞—Ç–∞ #${room.room_id}</strong><br>
        –•–æ—Å—Ç: ${room.host}<br>
        –ì–æ—Å—Ç—å: ${room.guest || '---'}<br>
        –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${room.participants}
      `;

      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ,
      // –¥–µ–ª–∞–µ–º –≤—Å—é –∑–∞–ø–∏—Å—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      if (currentUser === room.host || currentUser === room.guest) {
        roomDiv.onclick = () => {
          currentRoomId = room.room_id;
          connectWebSocket(currentRoomId);
          showGameRoom(room.room_id, room.host, room.guest);
        };

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ö–æ–∑—è–∏–Ω–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
        if (currentUser === room.host) {
          const deleteBtn = document.createElement("button");
          deleteBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
          deleteBtn.style.position = "absolute";
          deleteBtn.style.top = "5px";
          deleteBtn.style.right = "5px";
          deleteBtn.style.backgroundColor = "#e94560";
          deleteBtn.style.color = "#fff";
          deleteBtn.style.border = "none";
          deleteBtn.style.padding = "3px 6px";
          deleteBtn.style.cursor = "pointer";
          deleteBtn.addEventListener("click", (e) => {
            e.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –∫–ª–∏–∫ –Ω–∞ –≤—Å–µ–π –∑–∞–ø–∏—Å–∏
            if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É?")) {
              deleteRoom(room.room_id);
            }
          });
          roomDiv.appendChild(deleteBtn);
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ‚Äì –ø—Ä–∏ –∫–ª–∏–∫–µ –≤—ã–∑—ã–≤–∞–µ–º joinRoom
        roomDiv.onclick = () => joinRoom(room.room_id);
      }
      container.appendChild(roomDiv);
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É, –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã,
    // –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—ë –≤–∏–¥–∏–º–æ–π ‚Äì –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
    const createRoomBtn = document.querySelector(".create-room-area button");
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ–∑—è–∏–Ω–æ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã,
    // –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É:
    const userHasRoom = data.rooms.some(room => currentUser === room.host);
    createRoomBtn.style.display = userHasRoom ? "none" : "inline-block";
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:", error);
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: " + error.message);
  }
}






//–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:
document.getElementById("create-room-btn").addEventListener("click", async () => {
  const baseUrl = window.location.origin;
  const token = localStorage.getItem("token");
  try {
    const response = await fetch(`${baseUrl}/rooms/create`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token
      }
    });
    const data = await response.json();
    alert(data.message);
    loadRooms(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    currentRoomId = data.room_id;
    connectWebSocket(currentRoomId);
    // –í—ã–∑—ã–≤–∞–µ–º showGameRoom: —Ö–æ—Å—Ç ‚Äì —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≥–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    showGameRoom(data.room_id, localStorage.getItem("username"), "");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:", error);
    alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: " + error.message);
  }
});






//–§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∏ —É–¥–∞–ª–µ–Ω–∏—è:
async function joinRoom(roomId) {
  const baseUrl = window.location.origin;
  const token = localStorage.getItem("token");
  try {
    const response = await fetch(`${baseUrl}/rooms/${roomId}/join`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token
      }
    });
    const data = await response.json();
    alert(data.message);
    loadRooms(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    currentRoomId = data.room_id;
    connectWebSocket(currentRoomId);
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ—Å—Ç –∏ –≥–æ—Å—Ç—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    showGameRoom(data.room_id, data.host, data.guest);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:", error);
    alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: " + error.message);
  }
}



async function deleteRoom(roomId) {
  const baseUrl = window.location.origin;
  const token = localStorage.getItem("token");
  try {
    const response = await fetch(`${baseUrl}/rooms/${roomId}`, {
      method: "DELETE",
      headers: {
        "Authorization": "Bearer " + token
      }
    });
    const data = await response.json();
    alert(data.message);
    loadRooms(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:", error);
    alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: " + error.message);
  }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç–µ –µ—ë)
function showGameRoom(roomId, host, guest) {
  currentRoomId = roomId;
  window.currentHost = host;
  window.currentGuest = guest;
  const roomInfo = document.getElementById("room-info");
  roomInfo.textContent = `–ö–æ–º–Ω–∞—Ç–∞ #${roomId}. –•–æ—Å—Ç: ${host}, –ì–æ—Å—Ç—å: ${guest || '---'}`;
  document.getElementById("game-room-overlay").classList.remove("hidden");
}




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
document.getElementById("close-game-room-btn").addEventListener("click", () => {
  const gameRoomOverlay = document.getElementById("game-room-overlay");
  gameRoomOverlay.classList.add("hidden");
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocket
async function placeBet() {
  const betAmount = parseInt(document.getElementById("bet-amount").value, 10);
  if (!betAmount || betAmount <= 0) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!");
    return;
  }
  try {
    const response = await fetch(`${baseUrl}/rooms/${currentRoomId}/bet`, {
      method: "POST",
      headers: {
         "Content-Type": "application/json",
         "Authorization": "Bearer " + localStorage.getItem("token")
      },
      body: JSON.stringify({ bet: betAmount })
    });
    const data = await response.json();
    if (response.ok) {
      alert("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞");
      // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫)
      // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å WS‚Äë–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    } else {
      alert(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ");
  }
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏
function showRematchModal(finalMessage) {
  const rematchConfirmed = confirm(finalMessage + "\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?");
  if (rematchConfirmed) {
    proposeRematch();
  } else {
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–æ–≤–µ—Ä–ª–µ–π)
    document.getElementById("game-room-overlay").classList.add("hidden");
  }
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
async function markReady() {
  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤", —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  document.getElementById("ready-btn").disabled = true;
  try {
    const token = localStorage.getItem("token");
    const response = await fetch(`${baseUrl}/rooms/${currentRoomId}/ready`, {
      method: "POST",
      headers: {
         "Content-Type": "application/json",
         "Authorization": "Bearer " + token
      }
    });
    const data = await response.json();
    console.log("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:", data.message);
    // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —Å–µ—Ä–≤–µ—Ä –≤—ã–±–µ—Ä–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∞—é—â–µ–≥–æ.
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", error);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤–æ–π endpoint
async function rollDice() {
    console.log("rollDice() –≤—ã–∑–≤–∞–Ω–∞");
    try {
        const token = localStorage.getItem("token");
        const response = await fetch(`${baseUrl}/rooms/${currentRoomId}/roll`, {
            method: "POST",
            headers: {
               "Content-Type": "application/json",
               "Authorization": "Bearer " + token
            }
        });
        const data = await response.json();
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞:", data.dice);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:", error);
    }
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ UI –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å")
function showRematchOfferUI() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ game-room-overlay:
  const gameResultDiv = document.getElementById("game-result");
  gameResultDiv.innerHTML += `<button id="rematch-btn" onclick="proposeRematch()">–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫—É</button>`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏
async function proposeRematch() {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch(`${baseUrl}/rooms/${currentRoomId}/rematch_offer`, {
      method: "POST",
      headers: {
         "Content-Type": "application/json",
         "Authorization": "Bearer " + token
      }
    });
    const data = await response.json();
    console.log("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data.message);
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å
    document.getElementById("rematch-btn").remove();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏
async function answerRematch(accept) {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch(`${baseUrl}/rooms/${currentRoomId}/rematch_response`, {
      method: "POST",
      headers: {
         "Content-Type": "application/json",
         "Authorization": "Bearer " + token
      },
      body: JSON.stringify({ accept: accept })
    });
    const data = await response.json();
    console.log("–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏:", data.message);
    // –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ, UI –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ "rematch_accepted"
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä–æ–≤–æ–≥–æ UI –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏)
function resetGameUI() {
  // –°–±—Ä–æ—Å–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–∏–º –Ω–∞–¥–ø–∏—Å–∏
  currentStage = 1;
  currentTurn = "";
  document.getElementById("game-result").innerHTML = "<p>–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤'.</p>";
  // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
  document.getElementById("ready-btn").disabled = false;
  document.getElementById("roll-btn").disabled = true;
}


// –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤" —É–∂–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ —Å onclick="markReady()"

// –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–¥ rematch(), –µ–≥–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤—ã proposeRematch()/answerRematch().



// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
document.getElementById("place-bet-btn").addEventListener("click", placeBet);
document.getElementById("roll-btn").addEventListener("click", rollDice);
