const baseUrl = window.location.origin;



// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

document.addEventListener("DOMContentLoaded", () => {
     console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...");

     // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const openModalBtn = document.getElementById("open-register-modal");
    if (openModalBtn) {
        openModalBtn.addEventListener("click", openModal);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #open-register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    const cancelModalBtn = document.getElementById("modal-cancel");
    if (cancelModalBtn) {
        cancelModalBtn.addEventListener("click", closeModal);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #modal-cancel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerBtn = document.getElementById("modal-register");
    if (registerBtn) {
        registerBtn.addEventListener("click", handleRegister);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #modal-register –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    adjustLayout();
    window.addEventListener("resize", adjustLayout);

    checkAuth();

    const currentPath = window.location.pathname;

    const token = localStorage.getItem("token");
    
    if (token && !window.location.pathname.includes("game.html")) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –º—ã –Ω–µ –Ω–∞ game.html - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        window.location.href = "game.html";
    } else if (!token && window.location.pathname.includes("game.html")) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –Ω–æ –º—ã –Ω–∞ game.html - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        window.location.href = "register.html";
    }

    if (currentPath.includes("register.html")) {
        console.log("–ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        return;
    }

    if (currentPath.includes("game.html")) {
        console.log("–ù–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...");
        restoreState();
        return;
    }
    console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
    window.location.href = "register.html";
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal() {
    console.log("üîπ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
    const modal = document.getElementById("register-modal");
    if (modal) {
        modal.classList.remove("hidden");
    } else {
        console.error("‚ùå #register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    console.log("üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
    const modal = document.getElementById("register-modal");
    if (modal) {
        modal.classList.add("hidden");
    } else {
        console.error("‚ùå #register-modal –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
}

function showError(message) {
    const errorMsg = document.getElementById("error-message");
    errorMsg.textContent = message;
    errorMsg.classList.remove("hidden");
    setTimeout(() => errorMsg.classList.add("hidden"), 3000);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleRegister() {
    console.log("üü¢ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");

    const username = document.getElementById("modal-username").value.trim();
    const password = document.getElementById("modal-password").value.trim();

    if (!username || !password) {
        showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!");
        return;
    }

    console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (${username})`);

    try {
        const response = await fetch(`${baseUrl}/register`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, password })
        });

        const data = await response.json();
        console.log("üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

        if (response.ok) {
            localStorage.setItem("token", data.access_token);
            localStorage.setItem("username", username);
            console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ game.html...");
            window.location.href = "game.html";
        } else {
            alert(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const token = localStorage.getItem("token");
    const path = window.location.pathname;

    if (token) {
        if (!path.includes("game.html")) {
            console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É...");
            window.location.href = "game.html";
        }
    } else {
        if (path.includes("game.html")) {
            console.log("üö´ –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
            window.location.href = "register.html";
        }
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function restoreState() {
    const token = localStorage.getItem("token");

    if (!token) {
        console.log("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
        window.location.href = "register.html";
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    fetch(`${baseUrl}/validate-token`, {
        headers: {
            "Authorization": `Bearer ${token}`
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            localStorage.removeItem("token");
            window.location.href = "register.html";
        }
    })
    .then(data => {
        if (data) {
            localStorage.setItem("username", data.username);
            updateProfile(data.username, data);
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ game.html, –æ—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å
             // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.username}! üéâ`, "success");
            if (!window.location.pathname.includes("game.html")) {
                window.location.href = "game.html";
            }
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:", error);
        window.location.href = "register.html";
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
function adjustLayout() {
    const container = document.querySelector('.container');
    const statsPanel = document.querySelector('.stats-panel');
    const mainPanel = document.querySelector('main');
    const animationArea = document.getElementById('animation-area');

    if (container && statsPanel && mainPanel) {
        const containerHeight = window.innerHeight;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        statsPanel.style.height = `${containerHeight}px`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        const statsPanelHeight = statsPanel.offsetHeight;
        mainPanel.style.height = `${containerHeight}px`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        if (animationArea) {
        const containerWidth = animationArea.offsetWidth;
        animationArea.style.height = `${Math.max(100, containerWidth * 6 / 16)}px`; // –ü—Ä–æ–ø–æ—Ä—Ü–∏—è 6:16
    }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –Ω–∏–∂–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        adjustBottomPanel(mainPanel, containerHeight);
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∏–∂–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function adjustBottomPanel(mainPanel, containerHeight) {
    const debugConsole = document.getElementById("debug-console");
    const tabs = document.getElementById("tabs");

    if (debugConsole && tabs) {
        const debugHeight = debugConsole.offsetHeight;
        const tabsHeight = tabs.offsetHeight;

        const remainingHeight = containerHeight - (tabsHeight + debugHeight);

        if (remainingHeight > 0) {
            mainPanel.style.paddingBottom = `${remainingHeight}px`; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–Ω–∏–∑—É
        } else {
            mainPanel.style.paddingBottom = "0px"; // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        }
    }
}

function showNotification(message, type = "info", duration = 3000) {
    const container = document.getElementById("notification-container");

    const notification = document.createElement("div");
    notification.classList.add("notification", type, "show");

    notification.innerHTML = `
        <span>${message}</span>
        <button class="close-btn" onclick="this.parentElement.classList.add('hide')">&times;</button>
    `;

    container.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.add("hide");
        setTimeout(() => notification.remove(), 400); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    }, duration);
}





// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
function logDebug(message) {
    const debugLog = document.getElementById("debug-log");
    const timestamp = new Date().toLocaleTimeString();
    debugLog.textContent += `[${timestamp}] ${message}\n`;
    debugLog.scrollTop = debugLog.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ LocalStorage
function saveToLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LocalStorage
function getFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LocalStorage
function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function register() {
    const username = document.getElementById("username").value.trim();
    if (!username) {
        alert("Please enter a username!");
        return;
    }

    // –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    const password = prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
    if (!password) {
        alert("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/register`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: username, password: password })
        });

        const data = await response.json();

        if (response.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            localStorage.setItem("token", data.access_token);
            localStorage.setItem("username", username);
            window.location.href = "game.html";
        } else {
            alert(data.detail || "Registration failed.");
        }
    } catch (error) {
        alert("An error occurred during registration. Please try again.");
    }
}



function switchToMainInterface() {
    document.getElementById("registration").classList.add("hidden"); // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    document.getElementById("tabs").classList.remove("hidden"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
    logDebug("Switched to main interface.");
}

// –°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async function dailyReward() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, —á—Ç–æ –º—ã ¬´–∑–∞–ø—Ä–æ—Å–∏–ª–∏ Daily¬ª
    showAnimation("daily");

    try {
        const response = await fetch(`${baseUrl}/daily/${username}`, {
          headers: {
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    });
        const data = await response.json();
        if (data.total_coins) {
            document.getElementById("stat-coins").innerText = data.total_coins;
        }
        showModal(data.message, "success");
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: ${error}`, "error");
    } finally {
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º hideAllAnimations() –∑–¥–µ—Å—å!
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–∏–º —Ç–∞–π–º–µ—Ä—ã ‚Äî –æ–Ω–∏ —Å–∞–º–∏ —Ä–µ—à–∞—Ç,
        // –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å daily-–∞–Ω–∏–º–∞—Ü–∏—é
        fetchTimers();
    }
}


// –†–∞–±–æ—Ç–∞
async function workReward() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ¬´–†–∞–±–æ—Ç–∞–µ–º¬ª
    showAnimation("work");

    try {
        const response = await fetch(`${baseUrl}/work/${username}`, {
          headers: {
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    });
        const data = await response.json();
        if (data.total_coins) {
            document.getElementById("stat-coins").innerText = data.total_coins;
        }
        showModal(data.message, "success");
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ: ${error}`, "error");
    } finally {
        // –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é,
        // –∞ –¥–∞—ë–º fetchTimers() –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å ¬´work-animation¬ª
        fetchTimers();
    }
}


let diceAnimationInterval = null; // –•—Ä–∞–Ω–∏–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

// –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
async function playDice() {
    const username = document.getElementById("profile-username").innerText;
    const betInput = document.getElementById("bet").value;
    const bet = betInput ? parseInt(betInput, 10) : 0;

    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", "error");
        return;
    }
    if (bet <= 0) {
        showModal("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", "error");
        return;
    }

    const canvas = document.getElementById('diceCanvas');
    const ctx = canvas.getContext('2d');

    const diceWidth = canvas.width / 2 - 30;
    const diceHeight = canvas.height - 20;

    function drawDice(x, y, value) {
        const img = new Image();
        img.src = `/static/images/dice/dice-${value}.png`;
        img.onload = () => {
            ctx.drawImage(img, x, y, diceWidth, diceHeight);
        };
    }

    showElementById("dice-animation");

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    let interval = setInterval(() => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const random1 = Math.floor(Math.random() * 6) + 1;
        const random2 = Math.floor(Math.random() * 6) + 1;
        drawDice(20, 10, random1);
        drawDice(diceWidth + 40, 10, random2);
    }, 100);

    try {
        // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        const response = await fetch(`${baseUrl}/games/dice/${username}?bet=${bet}`, {
            headers: { "Authorization": "Bearer " + localStorage.getItem("token") }
        });

        if (!response.ok) {
            const errorData = await response.json();
            showModal(errorData.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞", "error");
            clearInterval(interval);
            hideElementById("dice-animation");
            return;
        }

        const data = await response.json();
        const [dice1, dice2] = data.dice;

        // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setTimeout(() => {
            clearInterval(interval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawDice(20, 10, dice1); // –ü–µ—Ä–≤—ã–π –∫—É–±–∏–∫
            drawDice(diceWidth + 40, 10, dice2); // –í—Ç–æ—Ä–æ–π –∫—É–±–∏–∫

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
            showModal(
    data.message, 
    data.winnings >= 0 ? "success" : "error"
);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById("stat-coins").textContent = data.total_coins;
            document.getElementById("stat-free-rolls").textContent = data.free_rolls;

            // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                hideElementById("dice-animation");
            }, 2000);
        }, 1500); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    } catch (error) {
        showModal(`–û—à–∏–±–∫–∞: ${error.message}`, "error");
        clearInterval(interval);
        hideElementById("dice-animation");
    }
}



//–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—Ä–æ—Å–∫–æ–≤.
// –ü–æ–∫—É–ø–∫–∞ –±—Ä–æ—Å–∫–æ–≤
async function buyRolls() {
    showModal("–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (1 –±—Ä–æ—Å–æ–∫ = 10 –º–æ–Ω–µ—Ç)", async (rollsToBuy) => {
        if (!rollsToBuy || rollsToBuy <= 0) {
            showModal("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤.", () => {});
            return;
        }

        const username = document.getElementById("profile-username").innerText;
        if (!username || username === "Guest") {
            showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
            return;
        }

        try {
            const response = await fetch(`${baseUrl}/buy-rolls/${username}`, {
                method: "POST",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem("token"),
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rolls: rollsToBuy })
            });
            const data = await response.json();

            if (response.ok) {
                document.getElementById("stat-coins").innerText = data.total_coins;
                document.getElementById("stat-free-rolls").innerText = data.free_rolls;
                showModal(data.message, () => {});
            } else {
                showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤.", () => {});
            }
        } catch (error) {
            showModal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤: " + error, () => {});
        }
    }, true);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
async function buyAdditionalRolls(username) {
    const rollsToBuy = parseInt(prompt("–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (1 –±—Ä–æ—Å–æ–∫ = 10 –º–æ–Ω–µ—Ç)"), 10);
    if (isNaN(rollsToBuy) || rollsToBuy <= 0) {
        alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤.");
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/buy-rolls/${username}`, {
            method: "POST",
            headers: {
                "Authorization": "Bearer " + localStorage.getItem("token"),
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ rolls: rollsToBuy })
        });
        const data = await response.json();

        if (response.ok) {
            alert(data.message);
            document.getElementById("stat-coins").innerText = data.total_coins;
            document.getElementById("stat-free-rolls").innerText = data.free_rolls;
        } else {
            alert(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ—Å–∫–æ–≤.");
        }
    } catch (error) {
        logDebug(`Error buying rolls: ${error}`);
        alert("An error occurred while buying rolls.");
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function switchToMainInterface() {
    document.getElementById("registration").classList.add("hidden");
    document.getElementById("tabs").classList.remove("hidden");
    logDebug("Switched to main interface.");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfile(username, data) {
    document.getElementById("profile-username").innerText = username;
    document.getElementById("stat-coins").innerText = data.coins || 0;
    document.getElementById("stat-rank").innerText = data.rank || "---";
    document.getElementById("stat-free-rolls").innerText = data.free_rolls || 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    const avatarElement = document.getElementById("avatar");
    avatarElement.src = `/static/avatars/${data.avatar}?v=` + new Date().getTime();

    logMessage(
      `–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: –ò–º—è = ${username}, –ú–æ–Ω–µ—Ç—ã = ${data.coins}, ` +
      `–†–∞–Ω–≥ = ${data.rank}, Free Rolls = ${data.free_rolls}`,
      "info"
    );

    // <-- –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤, —Ç.–∫. username —É–∂–µ —Ç–æ—á–Ω–æ –Ω–µ "Guest"
    fetchTimers();
}


//  —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:
async function deleteProfile() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
        return;
    }

    showModal("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", async (confirmed) => {
        if (!confirmed) return;

        try {
            const response = await fetch(`${baseUrl}/delete-profile/${username}`, {
                method: "DELETE"
            });
            const data = await response.json();

            if (response.ok) {
                showModal("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", () => {
                    removeFromLocalStorage("username");
                    window.location.href = "register.html";
                });
            } else {
                showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", () => {});
            }
        } catch (error) {
            showModal("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", () => {});
        }
    });
}




// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabId) {
    saveLogs(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏

    const tabs = document.querySelectorAll(".tab-content");
    tabs.forEach(tab => tab.classList.remove("active"));
    document.getElementById(tabId).classList.add("active");

    const buttons = document.querySelectorAll(".tab-button");
    buttons.forEach(btn => btn.classList.remove("active"));
    event.target.classList.add("active");

    restoreLogs(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏
    logMessage(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`, "info");

    // <-- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É –≤–æ "–≤–Ω–µ—à–Ω–µ–π" –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    window.currentTab = tabId;

    // –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å fetchTimers(), —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∏–º–∞—Ü–∏–π
    fetchTimers();
}


let logHistory = [];

function saveLogs() {
    const debugLog = document.getElementById("debug-log");
    logHistory = [...debugLog.children].map(child => child.outerHTML);
}

function restoreLogs() {
    const debugLog = document.getElementById("debug-log");
    debugLog.innerHTML = ""; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    logHistory.forEach(log => debugLog.innerHTML += log);
}


// —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é:
function toggleSettingsMenu() {
    const settingsMenu = document.getElementById("settings-menu");
    if (!settingsMenu) return;

    settingsMenu.classList.toggle("hidden");
    settingsMenu.style.display = settingsMenu.classList.contains("hidden") ? "none" : "block";
}

function toggleAvatarSelector() {
    const avatarMenu = document.getElementById("avatar-selector");
    if (avatarMenu) {
        if (avatarMenu.classList.contains("hidden")) {
            avatarMenu.style.display = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å
            avatarMenu.classList.remove("hidden");
        } else {
            avatarMenu.style.display = "none"; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
            avatarMenu.classList.add("hidden");
        }
        console.log("Current display style:", getComputedStyle(avatarMenu).display);
    }
}



// –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
async function selectAvatar(avatarName) {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") {
        showModal("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", () => {});
        return;
    }

    try {
        const response = await fetch(`${baseUrl}/set-avatar/${username}`, {
            method: "POST",
            headers: {
                "Authorization": "Bearer " + localStorage.getItem("token"),
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ avatar: avatarName })
        });

        const data = await response.json();

        if (response.ok) {
            const avatarElement = document.getElementById("avatar");

            // –û–±—Ö–æ–¥ –∫–µ—à–∞ —Å `?v=` + timestamp
            avatarElement.src = `/static/avatars/${avatarName}?v=${new Date().getTime()}`;

            showModal("–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", () => {});
        } else {
            showModal(data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏.", () => {});
        }
    } catch (error) {
        showModal("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏.", () => {});
    }
}





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å–æ–ª—å
function logMessage(message, type = 'info') {
    const debugLog = document.getElementById("debug-log");
    const timestamp = new Date().toLocaleTimeString();
    const formattedMessage = `[${timestamp}] ${message}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
    const lastMessage = debugLog.lastElementChild;
    if (lastMessage && lastMessage.textContent.includes(message)) {
        return;
    }

    const messageElement = document.createElement("div");
    messageElement.classList.add("log-message", type);
    messageElement.innerHTML = `<span class="timestamp">${formattedMessage}</span>`;
    debugLog.appendChild(messageElement);
    debugLog.scrollTop = debugLog.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", fetchTimers);

async function fetchTimers() {
    const username = document.getElementById("profile-username").innerText;
    if (!username || username === "Guest") return;

    try {
        const response = await fetch(`${baseUrl}/timers/${username}`);
        if (!response.ok) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã");
        }
        const data = await response.json();

        // –û–ø—Ä–µ–¥–µ–ª–∏–º, –Ω–∞ –∫–∞–∫–æ–π –≤–∫–ª–∞–¥–∫–µ –º—ã —Å–µ–π—á–∞—Å
        const currentTab = window.currentTab || "daily";

        // DAILY-–∞–Ω–∏–º–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "daily" –∏ daily>0
        if (currentTab === "daily" && data.daily > 0) {
            showElementById("daily-animation");
        } else {
            hideElementById("daily-animation");
        }

        // WORK-–∞–Ω–∏–º–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "work" –∏ work>0
        if (currentTab === "work" && data.work > 0) {
            showElementById("work-animation");
        } else {
            hideElementById("work-animation");
        }

        // Dice-–∞–Ω–∏–º–∞—Ü–∏—é –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∑–¥–µ—Å—å, –æ–Ω–∞ –Ω–µ –∑–∞–≤—è–∑–∞–Ω–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä.

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—Å—á—ë—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        startTimer(data.daily, document.getElementById("daily-timer"));
        startTimer(data.work, document.getElementById("work-timer"));
        startTimer(data.free_rolls, document.getElementById("free-rolls-timer"));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤:", error);
    }
}




function startTimer(duration, display) {
    if (duration <= 0) {
        display.textContent = "–ì–æ—Ç–æ–≤–æ!";
        return;
    }

    let timer = duration;
    clearInterval(display.timerInterval);

    display.timerInterval = setInterval(() => {
        display.textContent = formatTimeRemaining(timer);

        if (--timer < 0) {
            clearInterval(display.timerInterval);
            display.textContent = "–ì–æ—Ç–æ–≤–æ!";
        }
    }, 1000);
}


function toggleMenu() {
    const panel = document.getElementById("stats-panel");
    
    if (panel.style.display === "none") {
        panel.style.display = "block";
        setTimeout(() => panel.classList.add("active"), 10);
    } else {
        panel.classList.remove("active");
        setTimeout(() => panel.style.display = "none", 300);
    }
}

function showModal(message, callback, inputRequired = false) {
    const modal = document.getElementById("custom-modal");
    const messageElement = document.getElementById("modal-message");
    const inputField = document.getElementById("modal-input");
    const confirmButton = document.getElementById("modal-confirm");
    const cancelButton = document.getElementById("modal-cancel");

    messageElement.textContent = message;
    modal.classList.remove("hidden");

    if (inputRequired) {
        inputField.classList.remove("hidden");
        inputField.value = "";
        inputField.focus();
    } else {
        inputField.classList.add("hidden");
    }

    confirmButton.onclick = () => {
        const inputValue = inputRequired ? parseInt(inputField.value, 10) : true;
        modal.classList.add("hidden");
        callback(inputValue);
    };

    cancelButton.onclick = () => {
        modal.classList.add("hidden");
        callback(false);
    };
}



function formatTimeRemaining(seconds) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ –∏–ª–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ì–æ—Ç–æ–≤–æ!¬ª
    if (seconds <= 0) {
        return "–ì–æ—Ç–æ–≤–æ!";
    }

    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hrs > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        // –ü—Ä–∏–º–µ—Ä: "2—á 15–º"
        return `${hrs}—á ${mins}–º`;
    } else if (mins > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        // –ü—Ä–∏–º–µ—Ä: "45–º 30—Å"
        return `${mins}–º ${secs}—Å`;
    } else {
        // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥—ã
        // –ü—Ä–∏–º–µ—Ä: "30—Å"
        return `${secs}—Å`;
    }
}

function showElementById(id) {
    document.getElementById(id).classList.remove("hidden");
}

function hideElementById(id) {
    document.getElementById(id).classList.add("hidden");
}


function showAnimation(type) {
    // –°–ø—Ä—è—á–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    document.getElementById("daily-animation").classList.add("hidden");
    document.getElementById("work-animation").classList.add("hidden");
    document.getElementById("dice-animation").classList.add("hidden");

    // –ü–æ–∫–∞–∂–µ–º –Ω—É–∂–Ω—É—é
    if (type === "daily") {
        document.getElementById("daily-animation").classList.remove("hidden");
    } else if (type === "work") {
        document.getElementById("work-animation").classList.remove("hidden");
    } else if (type === "dice") {
        document.getElementById("dice-animation").classList.remove("hidden");
    }
}

function hideAllAnimations() {
    document.getElementById("daily-animation").classList.add("hidden");
    document.getElementById("work-animation").classList.add("hidden");
    document.getElementById("dice-animation").classList.add("hidden");
}

